SaLesson{#order:0,#units:OrderedCollection[SaMarkdownContent{#order:0,#title:'Objectives',#id:#___Objectives,#content:'# Objectifs\n\n- Comprendre en profondeur la representation de la carte\n- Interagir avec plusieur topics publies par gmapping\n- Apprendre a calculer la projection d\'un point sur un pixel, et d\'un pixel sur un point.\n- Ameliorer la compétence ROS-py\n'},SaMarkdownContent{#order:1,#title:'Slam TP',#id:#SlamTP,#content:'# Slam: TP\n## Resources\nSite web GMappings: [https://wiki.ros.org/gmapping](https://wiki.ros.org/gmapping).\nSite web Robotis (Turltebot 3) [https://emanual.robotis.com/docs/en/platform/turtlebot3/slam/](https://emanual.robotis.com/docs/en/platform/turtlebot3/slam/)\nMaterial jour 2 dans l\'application Sagan.\n  \n## Mis en place \nPour ce TP on a besoin d\'une instance GMappings en cours d\'execution. \nVous pourriez soit repeter la partie du demarrage du experiment SLAM du jour 2, ou suivre les tutorials dans les resources.\n\n## Map Metadata\nLe nœde GMappings publie le topic map_metadata. \nCe topic est transmit avec le type nav_msgs/MapMetaData.\nL\'information partagé dans ce topic est la description de la carte pendant le process de mapping. \n\nOn remarque de ce type les suivantes attributes: \n* float32 resolution\n* uint32 width\n* uint32 height\n* geometry_msgs/Pose origin\n\nUne carte GMappings est un espace cartesienne a deux dimensions a taille finite. \n\nCet information est savegarde dans un tableur a une dimension.\nLes attribues de map_metadata sont la pour donner information sufficiant pour faire un projection \nd\'une espace d\'une dimension Naturel (Des valeurs entiers positifs et 0), \na un espace cartesien a deux dimensions avec des valeurs reel positifs et negatifs. \n\nL\'attribue width indique la largeur absolute de la carte (l\'amplitude de la variable X).\nL\'attribue height indique la hauteur absolute de la carte (l\'amplitude de la variable Y).\nL\'attribute origin indique ou est-ce que ce le (0,0). \nSi les valeurs de width et height est 21, et le 0 est en (10,10), \non aurais 10 unites positifs et 10 unites negatifs en chaque variable. \n\nfinalement l\'attribue resolution indique la valeur en centemitres de chaque pixel.\nS\'on considere une valeur de resolution de 0,5cm et une carte ou width et height est 21\nalors, l\'area physique representé par la carte est de 21x21x0,5 = 220,1cm. \n\n\nAlors notre tableur avec tout les données est d\'une dimension, et de taille width X height.\n\nS\'on veut passer d\'une representation unidimensionel a une representation a deux dimensions: \nlentrée I dans le tableur, corresponde a une entrée (i,j) => (i,j) = (I / width, I mod width). \n\nFinalement pour etablir une relation entre un tableur a deux dimensions et un space cartesien reel a deux dimensions \nUn point physique (x,y) = ((i,j)+origin) * resolution.\n\n\n### Excercise 1\nEcrire un nœde python qui subscribe au topic map_metadata.\nA chaque fois que ce nœde recoive un nouvelle information, pour chaque point *physique*: \n\\{(1,0);(0,1);(-1,0);(0,-1)\\}, \n\\{(10,0);(0,10);(-10,0);(0,-10)\\}, \n\\{(100,0);(0,100);(-100,0);(0,-100)\\}\n\nil faut calculer et imprimer: \n\n* La valeur (i,j) \n* La valeur I de chaque point pour chaque (i,j) calcule dans le premier pas.\n\n\n\n## Map\nGMappings publie aussi le topic map. \nCe topic partage la carte decouverte jusqu\'au moment.\nCe topic est transmit avec le type nav_msgs/OccupancyGrid.\n\nOn remarque de ce type les suivantes attributes: \n\n* MapMetaData info\n* int8[] data\n\nInfo contiens la meme information partagé dans le topic map_metadata. Alors on peut utiliser cette information pour acceder aux informations dans le deuxieme attribute. \nData est un tableur d\'une dimension.\nCe tableur contiens 3 possible valeurs: Occupé, Libre, Unconnu. \n\n\n### Excercise 2\nEcrire un *nouveau* nœde python qui subscribe au topic map.\nA chaque fois que ce nœde recoive un nouvelle information, il doit compter combien des Occupé, Libre et Unconnu on trouve dans le carré disposse par les points physiques:\n\\{(10,0);(0,10);(-10,0);(0,-10)\\}. \n\nUne fois calculé, l\'imprimer en ecran. \nOn attende voir quelquechose comme ça:\n\n=======\nOccupe: xx\nLibre:  yy\nUnconnu: zz\n=======\n\n\n\n\n\n\n\n\n\n\n'},SaLessonSummary{#order:2,#title:'Summary',#id:#__Summary,#content:'#Summaire  \n\n\nvous devez être capable de:\n\n- Comprendre en profondeur la representation de la carte.\n- Interagir avec map et map_metadata.\n- Apprendre a calculer la projection d\'un point sur un pixel, et d\'un pixel sur un point.\n- Utiliser ROS-py a ce but.\n'}],#title:'SLAM TP',#current:3,#submitFolder:#RosElementalConcepts,#id:#SlamTP}